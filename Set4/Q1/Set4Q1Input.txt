int [][] capacity = new int[8][8];
		capacity[0][1] =1;
		capacity[0][2] =1;
	    capacity[1][3] =1;
	    capacity[2][3] =1;
	    capacity[3][4] =1;
	    capacity[4][5] =1;
	    capacity[4][6] =1;
	    capacity[5][7] =1;
	    capacity[6][7] =1;
	    int n = capacity.length;
	    MaxFlowPreflowN3 flow = new MaxFlowPreflowN3();
	    flow.init(n);
	    for (int i = 0; i < n; i++)
	      for (int j = 0; j < n; j++)
	        if (capacity[i][j] != 0)
	          flow.addEdge(i, j, capacity[i][j]);
	    System.out.println( flow.maxFlow(0, 7));


int [][] capacity = new int[9][9];
		capacity[0][1] =2;
		capacity[0][2] =2;
	    capacity[1][3] =1;
	    capacity[1][4] =1;
	    capacity[2][4] =1;
	    capacity[2][5] =1;
	    capacity[3][6] =1;
	    capacity[4][7] =2;
	    capacity[5][7] =1;
	    capacity[6][8] =1;
	    capacity[7][8] =3;
	    int n = capacity.length;
	    MaxFlowPreflowN3 flow = new MaxFlowPreflowN3();
	    flow.init(n);
	    for (int i = 0; i < n; i++)
	      for (int j = 0; j < n; j++)
	        if (capacity[i][j] != 0)
	          flow.addEdge(i, j, capacity[i][j]);
	    System.out.println( flow.maxFlow(0, 8));

2
2 2 2 5
1 3 1
2 3 1
3 4 1
4 5 1
4 6 1

2 2 3 7
1 3 1
1 4 1
2 4 1
2 5 1
3 6 1
4 7 2
5 7 1

1
2 2 3 7
1 3 1
1 4 1
2 4 1
2 5 1
3 6 1
4 7 2
5 7 1
