package BF;

public class BellmanFordAlgorithm {
    public static void main(String[] args) {  
        int V = 5;  // Number of vertices in graph  
        int E = 8;  // Number of edges in graph  
        Graph graph = createGraph(V, E);  
          
        graph.edge[0].src = 0;  
        graph.edge[0].dest = 1;  
        graph.edge[0].weight = -1;  
          
        graph.edge[1].src = 0;  
        graph.edge[1].dest = 2;  
        graph.edge[1].weight = 4;  
          
        graph.edge[2].src = 1;  
        graph.edge[2].dest = 2;  
        graph.edge[2].weight = 3;  
          
        graph.edge[3].src = 1;  
        graph.edge[3].dest = 3;  
        graph.edge[3].weight = 2;  
          
        graph.edge[4].src = 1;  
        graph.edge[4].dest = 4;  
        graph.edge[4].weight = 2;  
          
        graph.edge[5].src = 3;  
        graph.edge[5].dest = 2;  
        graph.edge[5].weight = 5;  
          
        graph.edge[6].src = 3;  
        graph.edge[6].dest = 1;  
        graph.edge[6].weight = 1;  
          
        graph.edge[7].src = 4;  
        graph.edge[7].dest = 3;  
        graph.edge[7].weight = -3;  
          
        bellmanFord(graph, 0);  
    }  
      
    // Creates a graph with V vertices and E edges  
    public static Graph createGraph(int V, int E){  
        Graph graph = new Graph(V, E);  
        graph.edge = new Edge[graph.E];  
        for(int i=0; i<E; i++){  
            graph.edge[i] = new Edge();  
        }  
        return graph;  
    }  
      
    // A utility function used to print the solution  
    public static void printArr(int[] dist, int n){  
        System.out.println("Vertex Distance from Source");  
        for(int i=0; i<n; i++){  
            System.out.format("%d \t\t %d\n", i, dist[i]);  
        }  
    }  
      
    // The main function that finds shortest distances from src to all other  
    // vertices using Bellman-Ford algorithm.  The function also detects negative  
    // weight cycle  
    public static void bellmanFord(Graph graph, int src){  
        int V = graph.V;  
        int E = graph.E;  
        int[] dist = new int[V];  
          
        // Step 1: Initialize distances from src to all other vertices as INFINITE  
        for(int i=0; i<V; i++){  
            dist[i] = Integer.MAX_VALUE;  
        }  
        dist[src] = 0;  
          
        // Step 2: Relax all edges |V| - 1 times. A simple shortest path from src  
        // to any other vertex can have at-most |V| - 1 edges  
        for(int i=1; i<=V-1; i++){  
            for(int j=0; j<E; j++){  
                int u = graph.edge[j].src;  
                int v = graph.edge[j].dest;  
                int weight = graph.edge[j].weight;  
                dist[v] = Math.min(dist[v], dist[u]+weight);  
            }  
        }  
          
        // Step 3: check for negative-weight cycles.  The above step guarantees  
        // shortest distances if graph doesn't contain negative weight cycle.    
        // If we get a shorter path, then there is a cycle.  
        for(int i=0; i<E; i++){  
            int u = graph.edge[i].src;  
            int v = graph.edge[i].dest;  
            int weight = graph.edge[i].weight;  
            if(dist[u]+weight < dist[v]){  
                System.out.println("Graph contains negative weight cycle");  
            }  
        }  
          
        printArr(dist, V); }
}
